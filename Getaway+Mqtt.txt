//Muhammad Kholilulloh
//M. Alfalogika K.
//Baihaqsani

#include <BLEDevice.h>
#include <BLEServer.h>
#include <BLEUtils.h>
#include <BLE2902.h>
#include <WiFi.h>
#include <PubSubClient.h>
WiFiClient wifiClient;
PubSubClient client(wifiClient);

BLEServer* pServer = NULL;
BLECharacteristic* pCharacteristic = NULL;
bool deviceConnected = false;
bool oldDeviceConnected = false;

#define SERVICE_UUID           "0000181A-0000-1000-8000-00805F9B34FB"
#define CHARACTERISTIC_UUID    "00003A6F-0000-1000-8000-00805F9B34FB"
#define CHARACTERISTIC_UUID_RX "00002A6F-0000-1000-8000-00805F9B34FB"
static int clientCount = 0;
static boolean send = false;
uint8_t dataToClient ;
static int ec [6];
static int count = 0;
int temp, hasil;
void setup_wifi() {
  WiFi.begin("No Name", "sembarang9999");
  randomSeed(micros());
  Serial.println(WiFi.localIP());
}

void reconnect() {
  while (!client.connected()) {
    String clientId = "ESP32Client-";
    clientId += String(random(0xffff), HEX);
    if (client.connect(clientId.c_str())) {
      client.subscribe("khl99/esp32/led");
    } else {
      Serial.print(".");
      Serial.println();
      delay(5000);
    }
  }
}

void callback(char* topic, byte *payload, unsigned int length) {
  if (payload[0] == '1') {
    Serial.println("Sprayer Air Nyala");
    send = true;
    dataToClient = 1;
  } else if (payload[0] == '0') {
    Serial.println("Sprayer Air Mati");
    send = true;
    dataToClient = 0;
  } else {
    send = false;
  }
}

void publishStringData(char* topic, char* value) {
  if (!client.connected()) {
    reconnect();
  }
  client.publish(topic, value);
}

class MyServerCallbacks: public BLEServerCallbacks {
    void onConnect(BLEServer* pServer) {
      deviceConnected = true;
      clientCount = clientCount + 1;
      BLEDevice::startAdvertising();
    };

    void onDisconnect(BLEServer* pServer) {
      deviceConnected = false;
      clientCount = clientCount - 1;
    }
};

class MyCallbacks: public BLECharacteristicCallbacks {
    void onWrite(BLECharacteristic *pCharacteristic) {
      uint8_t* rxValue = pCharacteristic->getData();
      Serial.print("Menerima Data Ke ");
      Serial.print(count);
      Serial.print(" Dari Node Sensor, ");
      Serial.print("Humidity = ");
      Serial.println(rxValue[0]);
      char humidToBroker[3];
      ec[count] = int(rxValue[0]);
      count++;
      if (ec[5] != 0) {
        for (int i = 0; i < 6; i++) {
          temp = temp + ec[i];
          ec[i] = 0;
        }
        hasil = temp / 6;
        String hum = String(hasil);
        hum.toCharArray(humidToBroker, 3);
        publishStringData("khl99/esp32/humidity", humidToBroker);
        Serial.println("Data telah dipublish ke broker");
        count=hasil=temp=0;
      }
    }
};

void setup() {
  delay(10000);
  Serial.begin(115200);
  Serial.println("device Start");
  setup_wifi();
  client.setServer("broker.hivemq.com", 1883);
  client.setCallback(callback);
  reconnect();

  BLEDevice::init("GETAWAYaa");
  pServer = BLEDevice::createServer();
  pServer->setCallbacks(new MyServerCallbacks());
  BLEService *pService = pServer->createService(SERVICE_UUID);

  pCharacteristic = pService->createCharacteristic(
                      CHARACTERISTIC_UUID,
                      BLECharacteristic::PROPERTY_NOTIFY
                    );
  pCharacteristic->addDescriptor(new BLE2902());
  BLECharacteristic *pCharacteristic = pService->createCharacteristic(
                                         CHARACTERISTIC_UUID_RX,
                                         BLECharacteristic::PROPERTY_WRITE
                                       );
  pCharacteristic->setCallbacks(new MyCallbacks());

  pService->start();

  BLEAdvertising *pAdvertising = BLEDevice::getAdvertising();
  BLEAdvertising *pAdvertising2 = BLEDevice::getAdvertising();
  pAdvertising->addServiceUUID(SERVICE_UUID);
  pAdvertising->setScanResponse(false);
  pAdvertising->setMinPreferred(0x0);
  BLEDevice::startAdvertising();
}

void loop() {
  client.loop();

  //    publishStringData("khl99/esp32/humidity", "10.0");
  if (deviceConnected || clientCount > 0) {
    if (send) {
      //      char txString[2];
      //      dataToClient.toCharArray(txString, sizeof(txString));
      pCharacteristic->setValue(&dataToClient, 1);
      pCharacteristic->notify();
      Serial.println("Meneruskan Data Ke Node Sensor");
      send = false;
    }
    delay(500);
  }
  if (!deviceConnected && oldDeviceConnected) {
    delay(500);
    pServer->startAdvertising();
    oldDeviceConnected = deviceConnected;
  }
  if (deviceConnected && !oldDeviceConnected) {
    oldDeviceConnected = deviceConnected;
  }
}